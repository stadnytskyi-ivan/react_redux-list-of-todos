{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","app/utils.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","defaultState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","visibleTodos","completed","filterByStatus","preparedQuery","trim","toLowerCase","title","includes","filterWithQuery","getFilteredTodos","length","className","map","isCurrent","id","classNames","onClick","currentTodoAction","handleButtonClick","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","isError","setIsError","user","setUser","handleModalClose","loadUser","a","userId","currentUser","useEffect","href","email","name","App","loadTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c77d3b7e.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'qury/change', payload: string };\ntype SetStatusAction = { type: 'status/change', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'qury/change',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/change',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Action = SetQueryAction | SetStatusAction;\n\nexport type State = {\n  query: string,\n  status: Status,\n};\n\nconst defaultState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: State = defaultState, action: Action) => {\n  switch (action.type) {\n    case 'qury/change':\n      return { ...state, query: action.payload };\n\n    case 'status/change':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/set', payload: Todo[] };\n\nconst set = (todos: Todo[]): SetAction => ({\n  type: 'todos/set',\n  payload: todos,\n});\n\nexport const actions = { set };\n\nconst todosReducer = (state: Todo[] = [], action: SetAction): Todo[] => {\n  if (action.type === 'todos/set') {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getFilteredTodos } from '../../app/utils';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleButtonClick = (todo: Todo) => {\n    dispatch(currentTodoAction.setTodo(todo));\n  };\n\n  const filteredTodos = getFilteredTodos(todos, filter);\n\n  if (filteredTodos.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map(todo => {\n            const isCurrent = currentTodo?.id === todo.id;\n\n            return (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleButtonClick(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye': !isCurrent,\n                        'fa-eye-slash': isCurrent,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { State } from '../features/filter';\nimport { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nconst filterWithQuery = (todos: Todo[], query: string) => {\n  const preparedQuery = query.trim().toLowerCase();\n\n  return todos.filter(todo => todo.title.toLowerCase().includes(preparedQuery));\n};\n\nconst filterByStatus = (todos: Todo[], status: Status) => {\n  switch (status) {\n    case 'active':\n      return todos.filter(todo => !todo.completed);\n    case 'completed':\n      return todos.filter(todo => todo.completed);\n    default:\n      return todos;\n  }\n};\n\nexport const getFilteredTodos = (todos: Todo[], filter: State) => {\n  const { query, status } = filter;\n  let visibleTodos = filterByStatus(todos, status);\n\n  if (query) {\n    visibleTodos = filterWithQuery(visibleTodos, query);\n  }\n\n  return visibleTodos;\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleStatusChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const hadleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const hadleQueryRemove = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={hadleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Delete search query button\"\n              onClick={hadleQueryRemove}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleModalClose = () => {\n    dispatch(currentTodoAction.removeTodo());\n  };\n\n  const loadUser = async () => {\n    try {\n      if (currentTodo) {\n        const currentUser = await getUser(currentTodo.userId);\n\n        setUser(currentUser);\n      }\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, [currentTodo]);\n\n  if (isError) {\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Server is unavailable. Try again later...\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleModalClose}\n            />\n          </header>\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              Error\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleModalClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo?.completed\n                  && <strong className=\"has-text-danger\">Planned</strong>}\n                {currentTodo?.completed\n                  && <strong className=\"has-text-success\">Done</strong>}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.set(todosFromServer));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  if (isError) {\n    return <p>Server is unavailable. Try again later...</p>;\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}